# Generated by Django 5.2 on 2025-04-29 08:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.hashers import make_password
from django.utils.text import slugify

def create_test_users(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Profile = apps.get_model('accounts', 'Profile')
    
    # Create admin user
    admin = User.objects.create(
        username='admin',
        email='admin@example.com',
        password=make_password('admin123'),
        is_staff=True,
        is_superuser=True
    )
    Profile.objects.create(user=admin)
    
    # Create test students
    john = User.objects.create(
        username='john',
        email='john@example.com',
        password=make_password('john123'),
        first_name='John',
        last_name='Doe'
    )
    Profile.objects.create(user=john)
    
    jane = User.objects.create(
        username='jane',
        email='jane@example.com',
        password=make_password('jane123'),
        first_name='Jane',
        last_name='Smith'
    )
    Profile.objects.create(user=jane)
    
    # Create instructor users
    dr_smith = User.objects.create(
        username='dr.smith',
        email='smith@example.com',
        password=make_password('smith123'),
        first_name='John',
        last_name='Smith',
        is_staff=True
    )
    Profile.objects.create(user=dr_smith)
    
    dr_johnson = User.objects.create(
        username='dr.johnson',
        email='johnson@example.com',
        password=make_password('johnson123'),
        first_name='Sarah',
        last_name='Johnson',
        is_staff=True
    )
    Profile.objects.create(user=dr_johnson)

def create_course_data(apps, schema_editor):
    CourseCategory = apps.get_model('courses', 'CourseCategory')
    Course = apps.get_model('courses', 'Course')
    Module = apps.get_model('courses', 'Module')
    CourseContent = apps.get_model('courses', 'CourseContent')
    Enrollment = apps.get_model('courses', 'Enrollment')
    ModuleProgress = apps.get_model('courses', 'ModuleProgress')
    User = apps.get_model('auth', 'User')
    
    # Get instructors
    dr_smith = User.objects.get(username='dr.smith')
    dr_johnson = User.objects.get(username='dr.johnson')
    
    # Create categories
    programming = CourseCategory.objects.create(
        name='Programming',
        description='Learn programming languages and concepts',
        slug=slugify('Programming')
    )
    data_science = CourseCategory.objects.create(
        name='Data Science',
        description='Master data analysis and machine learning',
        slug=slugify('Data Science')
    )
    web_dev = CourseCategory.objects.create(
        name='Web Development',
        description='Learn modern web development technologies',
        slug=slugify('Web Development')
    )
    computer_science = CourseCategory.objects.create(
        name='Computer Science',
        description='Core computer science concepts and algorithms',
        slug=slugify('Computer Science')
    )
    databases = CourseCategory.objects.create(
        name='Databases',
        description='Database design, management, and optimization',
        slug=slugify('Databases')
    )
    
    # Create courses
    python_course = Course.objects.create(
        title='Python Programming',
        description='Learn Python from basics to advanced concepts',
        category=programming,
        level='beginner',
        price=0,
        instructor=dr_smith,
        status='published',
        slug=slugify('Python Programming'),
        is_featured=True
    )
    
    ml_course = Course.objects.create(
        title='Machine Learning Fundamentals',
        description='Introduction to machine learning concepts and applications',
        category=data_science,
        level='intermediate',
        price=0,
        instructor=dr_johnson,
        status='published',
        slug=slugify('Machine Learning Fundamentals'),
        is_featured=True
    )
    
    web_dev_course = Course.objects.create(
        title='Web Development Fundamentals',
        description='Master the basics of web development including HTML, CSS, and JavaScript',
        category=web_dev,
        level='beginner',
        price=0,  # Free course
        instructor=dr_smith,
        status='published',
        slug=slugify('Web Development Fundamentals'),
        is_featured=True
    )
    
    dsa_course = Course.objects.create(
        title='Data Structures and Algorithms',
        description='Learn essential data structures and algorithms for efficient problem-solving',
        category=computer_science,
        level='intermediate',
        price=49.99,
        instructor=dr_johnson,
        status='published',
        slug=slugify('Data Structures and Algorithms'),
        is_featured=False
    )
    
    db_course = Course.objects.create(
        title='Database Design and Management',
        description='Comprehensive guide to database design, SQL, and database management systems',
        category=databases,
        level='intermediate',
        price=39.99,
        instructor=dr_smith,
        status='published',
        slug=slugify('Database Design and Management'),
        is_featured=False
    )
    
    # Create modules for Python course
    python_intro = Module.objects.create(
        course=python_course,
        title='Introduction to Python',
        description='Basic Python syntax and concepts',
        order=1,
        estimated_time=60
    )
    
    python_advanced = Module.objects.create(
        course=python_course,
        title='Advanced Python Concepts',
        description='Advanced Python programming techniques',
        order=2,
        estimated_time=90
    )
    
    # Create modules for ML course
    ml_intro = Module.objects.create(
        course=ml_course,
        title='Introduction to Machine Learning',
        description='Basic ML concepts and terminology',
        order=1,
        estimated_time=60
    )
    
    ml_algorithms = Module.objects.create(
        course=ml_course,
        title='Basic ML Algorithms',
        description='Common machine learning algorithms',
        order=2,
        estimated_time=90
    )
    
    # Create modules for Web Development course
    web_html = Module.objects.create(
        course=web_dev_course,
        title='HTML Fundamentals',
        description='Learn HTML5 structure and semantic elements',
        order=1,
        estimated_time=45
    )
    
    web_css = Module.objects.create(
        course=web_dev_course,
        title='CSS Styling',
        description='Master CSS for beautiful web layouts',
        order=2,
        estimated_time=60
    )
    
    web_js = Module.objects.create(
        course=web_dev_course,
        title='JavaScript Basics',
        description='Introduction to JavaScript programming',
        order=3,
        estimated_time=75
    )
    
    # Create modules for DSA course
    dsa_basics = Module.objects.create(
        course=dsa_course,
        title='Basic Data Structures',
        description='Arrays, linked lists, stacks, and queues',
        order=1,
        estimated_time=90
    )
    
    dsa_advanced = Module.objects.create(
        course=dsa_course,
        title='Advanced Data Structures',
        description='Trees, graphs, and hash tables',
        order=2,
        estimated_time=120
    )
    
    dsa_algorithms = Module.objects.create(
        course=dsa_course,
        title='Common Algorithms',
        description='Sorting, searching, and graph algorithms',
        order=3,
        estimated_time=150
    )
    
    # Create modules for Database course
    db_design = Module.objects.create(
        course=db_course,
        title='Database Design',
        description='Entity-Relationship modeling and normalization',
        order=1,
        estimated_time=90
    )
    
    db_sql = Module.objects.create(
        course=db_course,
        title='SQL Programming',
        description='Writing efficient SQL queries',
        order=2,
        estimated_time=120
    )
    
    db_management = Module.objects.create(
        course=db_course,
        title='Database Management',
        description='Performance tuning and optimization',
        order=3,
        estimated_time=90
    )
    
    # Create course content
    CourseContent.objects.create(
        module=python_intro,
        title='Python Basics',
        content_type='text',
        content='Introduction to Python programming language...',
        order=1
    )
    
    CourseContent.objects.create(
        module=python_intro,
        title='Variables and Data Types',
        content_type='text',
        content='Learn about Python variables and data types...',
        order=2
    )
    
    CourseContent.objects.create(
        module=ml_intro,
        title='What is Machine Learning?',
        content_type='text',
        content='Introduction to machine learning concepts...',
        order=1
    )
    
    # Create content for Web Development course
    CourseContent.objects.create(
        module=web_html,
        title='HTML Document Structure',
        content_type='text',
        content='Learn about HTML document structure and basic elements...',
        order=1
    )
    
    CourseContent.objects.create(
        module=web_css,
        title='CSS Selectors and Properties',
        content_type='text',
        content='Understanding CSS selectors and common properties...',
        order=1
    )
    
    CourseContent.objects.create(
        module=web_js,
        title='JavaScript Variables and Functions',
        content_type='text',
        content='Introduction to JavaScript variables and functions...',
        order=1
    )
    
    # Create content for DSA course
    CourseContent.objects.create(
        module=dsa_basics,
        title='Arrays and Linked Lists',
        content_type='text',
        content='Understanding arrays and linked lists...',
        order=1
    )
    
    CourseContent.objects.create(
        module=dsa_advanced,
        title='Binary Trees',
        content_type='text',
        content='Introduction to binary trees and their operations...',
        order=1
    )
    
    CourseContent.objects.create(
        module=dsa_algorithms,
        title='Sorting Algorithms',
        content_type='text',
        content='Common sorting algorithms and their complexity...',
        order=1
    )
    
    # Create content for Database course
    CourseContent.objects.create(
        module=db_design,
        title='Entity-Relationship Diagrams',
        content_type='text',
        content='Creating and understanding ER diagrams...',
        order=1
    )
    
    CourseContent.objects.create(
        module=db_sql,
        title='SQL Queries',
        content_type='text',
        content='Writing basic and advanced SQL queries...',
        order=1
    )
    
    CourseContent.objects.create(
        module=db_management,
        title='Indexing and Optimization',
        content_type='text',
        content='Database indexing and query optimization...',
        order=1
    )
    
    # Create enrollments and progress for test users
    john = User.objects.get(username='john')
    jane = User.objects.get(username='jane')
    
    # John's enrollments
    john_python = Enrollment.objects.create(
        student=john,
        course=python_course,
        status='in_progress',
        progress=50
    )
    
    john_ml = Enrollment.objects.create(
        student=john,
        course=ml_course,
        status='not_started',
        progress=0
    )
    
    john_web = Enrollment.objects.create(
        student=john,
        course=web_dev_course,
        status='in_progress',
        progress=33
    )
    
    # Jane's enrollments
    jane_python = Enrollment.objects.create(
        student=jane,
        course=python_course,
        status='completed',
        progress=100
    )
    
    jane_ml = Enrollment.objects.create(
        student=jane,
        course=ml_course,
        status='in_progress',
        progress=75
    )
    
    jane_dsa = Enrollment.objects.create(
        student=jane,
        course=dsa_course,
        status='in_progress',
        progress=25
    )
    
    # Create module progress records
    ModuleProgress.objects.create(
        enrollment=john_python,
        module=python_intro,
        status='completed',
        progress=100,
        time_spent=60
    )
    
    ModuleProgress.objects.create(
        enrollment=john_python,
        module=python_advanced,
        status='in_progress',
        progress=50,
        time_spent=45
    )
    
    ModuleProgress.objects.create(
        enrollment=jane_python,
        module=python_intro,
        status='completed',
        progress=100,
        time_spent=60
    )
    
    ModuleProgress.objects.create(
        enrollment=jane_python,
        module=python_advanced,
        status='completed',
        progress=100,
        time_spent=90
    )
    
    # Web Development progress
    ModuleProgress.objects.create(
        enrollment=john_web,
        module=web_html,
        status='completed',
        progress=100,
        time_spent=45
    )
    
    ModuleProgress.objects.create(
        enrollment=john_web,
        module=web_css,
        status='in_progress',
        progress=50,
        time_spent=30
    )
    
    # DSA progress
    ModuleProgress.objects.create(
        enrollment=jane_dsa,
        module=dsa_basics,
        status='completed',
        progress=100,
        time_spent=90
    )
    
    ModuleProgress.objects.create(
        enrollment=jane_dsa,
        module=dsa_advanced,
        status='in_progress',
        progress=25,
        time_spent=30
    )

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('slug', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Course Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('max_students', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='course_thumbnails/')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_teaching', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='courses.coursecategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField()),
                ('estimated_time', models.PositiveIntegerField(help_text='Estimated time in minutes')),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('course', 'order')},
            },
        ),
        migrations.CreateModel(
            name='CourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content_type', models.CharField(choices=[('text', 'Text'), ('video', 'Video'), ('file', 'File'), ('quiz', 'Quiz'), ('assignment', 'Assignment')], max_length=20)),
                ('content', models.TextField()),
                ('file', models.FileField(blank=True, null=True, upload_to='course_contents/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_required', models.BooleanField(default=True)),
                ('estimated_time', models.PositiveIntegerField(default=0)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='courses.module')),
            ],
            options={
                'ordering': ['order', 'created_at'],
                'unique_together': {('module', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('dropped', 'Dropped')], default='not_started', max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrolled_at'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='ModuleProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('time_spent', models.IntegerField(default=0)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='module_progress', to='courses.enrollment')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to='courses.module')),
            ],
            options={
                'ordering': ['module__order'],
                'unique_together': {('enrollment', 'module')},
            },
        ),
        migrations.RunPython(create_test_users),
        migrations.RunPython(create_course_data),
    ]

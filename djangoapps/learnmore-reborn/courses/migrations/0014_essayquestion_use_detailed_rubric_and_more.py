# Generated by Django 5.2.1 on 2025-05-20 20:55

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0013_questionresponse_annotated_by_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='essayquestion',
            name='use_detailed_rubric',
            field=models.BooleanField(default=False, help_text='If true, use structured rubric instead of simple point allocation'),
        ),
        migrations.AlterField(
            model_name='essayquestion',
            name='rubric',
            field=models.TextField(blank=True, help_text='Legacy text rubric for simple grading'),
        ),
        migrations.CreateModel(
            name='ScoringRubric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the rubric', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the rubric and its purpose')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False, help_text='If true, this rubric can be used by all instructors')),
                ('total_points', models.PositiveIntegerField(default=0, help_text='Total possible points for this rubric')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_rubrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Scoring Rubric',
                'verbose_name_plural': 'Scoring Rubrics',
            },
        ),
        migrations.CreateModel(
            name='RubricCriterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the criterion', max_length=255)),
                ('description', models.TextField(help_text='Description of what to evaluate')),
                ('max_points', models.PositiveIntegerField(default=10, help_text='Maximum points for this criterion')),
                ('weight', models.FloatField(default=1.0, help_text='Weight of this criterion in the total score')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('performance_levels', models.JSONField(blank=True, default=dict, help_text='JSON definition of performance levels and point ranges')),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='courses.scoringrubric')),
            ],
            options={
                'verbose_name': 'Rubric Criterion',
                'verbose_name_plural': 'Rubric Criteria',
                'ordering': ['rubric', 'order'],
            },
        ),
        migrations.AddField(
            model_name='essayquestion',
            name='scoring_rubric',
            field=models.ForeignKey(blank=True, help_text='Advanced rubric with criteria for detailed grading', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='essay_questions', to='courses.scoringrubric'),
        ),
        migrations.CreateModel(
            name='RubricFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('comments', models.TextField(blank=True)),
                ('performance_level', models.CharField(blank=True, max_length=100)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='courses.rubriccriterion')),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_feedback', to='courses.questionresponse')),
            ],
            options={
                'unique_together': {('response', 'criterion')},
            },
        ),
    ]
